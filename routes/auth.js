const express = require('express');
const router = express.Router();
const bcrypt = require('bcrypt');
const User = require('../models/User');

// ‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
router.post('/register', async (req, res) => {
  const { nickname, email, password } = req.body;

  try {
    // üîÅ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å –Ω—ñ–∫–Ω–µ–π–º—É
    const existingUser = await User.findOne({ nickname });
    if (existingUser) {
      return res.status(400).json({ message: '–¶–µ–π –Ω—ñ–∫–Ω–µ–π–º –≤–∂–µ –∑–∞–π–Ω—è—Ç–æ' });
    }

    // üîÅ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å –ø–æ—à—Ç–∏
    const existingEmail = await User.findOne({ email });
    if (existingEmail) {
      return res.status(400).json({ message: '–¶—è –ø–æ—à—Ç–∞ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∞' });
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    const newUser = new User({ nickname, email, password: hashedPassword });
    await newUser.save();

    res.status(201).json({ message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π —É—Å–ø—ñ—à–Ω–æ' });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// ‚úÖ –í—Ö—ñ–¥
router.post('/login', async (req, res) => {
  const { email, password } = req.body;

  try {
    const user = await User.findOne({ email });
    if (!user) return res.status(400).json({ message: '–ù–µ–≤—ñ—Ä–Ω–∞ –ø–æ—à—Ç–∞ –∞–±–æ –ø–∞—Ä–æ–ª—å' });

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) return res.status(400).json({ message: '–ù–µ–≤—ñ—Ä–Ω–∞ –ø–æ—à—Ç–∞ –∞–±–æ –ø–∞—Ä–æ–ª—å' });

    // ‚ú® –ù–∞–¥—Å–∏–ª–∞—î–º–æ –¥–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç—É
    res.status(200).json({
      message: '–í—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–∏–π',
      nickname: user.nickname,
      coins: user.coins,
      highscore: user.highscore
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

module.exports = router;
